<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_XAxis" Id="{c9823ab9-6940-4593-af53-d74753ea8b8f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC FB_XAxis
VAR_INPUT
	bMotorOn : BOOL;
END_VAR

VAR
	fbTon : TON := (PT :=T#1.5S);
	nMoveCount : DINT := 0;
	Enable_Prog_Functions : BOOL := TRUE; (* Start demo *)
    state : INT; (*-10: connection lost, -20/-21: Error, 100-199 demo application, 200: idle state*)
    
	CommunicationError : BOOL; (* No Communication to XENAX*)	
    ValidConCnt : INT; (*CyclicIn.valid toggles somtetimes. So we believe the CyclicIn.valid only after some time*)
	
	  (*Function blocks required for operation*)
  instJS_MC_Init 					: JS_MC_Init;
  instJS_MC_CyclicIn 				: JS_MC_CyclicIn;
  instJS_MC_CyclicOut 			: JS_MC_CyclicOut;
  instJS_MC_Power 				: JS_MC_Power;
  instJS_MC_Reference 			: JS_MC_Reference;
  instJS_MC_Stop 					: JS_MC_Stop;
  instJS_MC_Reset 				: JS_MC_Reset;
  
  (*Additional function blocks for Profile Position*)
  	instJS_MC_MoveAbsolute 			: JS_MC_MoveAbsolute;
  	instJS_MC_MoveRelative 			: JS_MC_MoveRelative;
  	instJS_MC_JogVelocity			: JS_MC_JogVelocity;
  	instJS_MC_Halt 					: JS_MC_Halt;
	
  (*Function blocks for error handling*)
  	instJS_MC_ReadAxisError			: JS_MC_ReadAxisError;
  	instJS_MC_AxisErrorCollector	: JS_MC_AxisErrorCollector;
	
  (*Optional function blocks*)
	instJS_MC_ReadActualPosition 	: JS_MC_ReadActualPosition;
	instJS_MC_ReadStatus 			: JS_MC_ReadStatus;
	instJS_MC_ReadPSR	 			: JS_MC_ReadPSR;
	instJS_MC_ReadDigitalOutput 	: JS_MC_ReadDigitalOutput;
	instJS_MC_ReadDigitalInput 		: JS_MC_ReadDigitalInput;
	instJS_MC_ReadParameter 		: JS_MC_ReadParameter;
	instJS_MC_WriteParameter 		: JS_MC_WriteParameter;
	instJS_MC_WriteDigitalOutput 	: JS_MC_WriteDigitalOutput;
END_VAR

VAR_OUTPUT 
	bYstart : BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT instJS_MC_Init.Valid THEN
    instJS_MC_Init.OperationMode := gcJS_MC.jsmcMODE_PROFILE_POSITION; //PROFILE_POSITION: trajectories are calculated by Xenax Servocontroller. There is no need for an NC Axis, less PLC cpu consumption, but gives less control over driving behavior.
    instJS_MC_Init();                         // init Axis, only call this funtion once at startup
    
    (*reference options*)
    instJS_MC_Reference.ReferenceMode	:= gcJS_MC.jsmcREFERENCE_MODE_DEFAULT;      (* Motor type specific default reference method*)
    (*additional reference options for rotative motors*)
    instJS_MC_Reference.ZMarkSpeedRot := 10000;                                   (* speed during refernce*)
    instJS_MC_Reference.ReferenceSpeedRot := 0;                                   (* speed for optional refernce to a home sensor, 0 is disabled*)
    
    (*enable Error and Status block*)
    instJS_MC_ReadAxisError.Enable := TRUE;
    instJS_MC_ReadStatus.Enable := TRUE;

(***********************************************************************************
 * run loop
 ***********************************************************************************)
ELSE
    instJS_MC_Init(); //recall JS_MC_Init is required for online changes. It recalculates pstAxis output.
    instJS_MC_CyclicIn(pstAxis := instJS_MC_Init.pstAxis); //Gets cyclic data from EtherCat bus und checks if connection is still valid

	IF instJS_MC_CyclicIn.Error AND state >= 0 THEN (*handle Communication Error e.g. ethernet cable disconnected if not already on error*)
        state := -10;
	END_IF
(*-------------------------------------------------------------------------------------------------------------------------------*)

    CASE state OF 
    (*Power Up sequence----------------------------------------------------------------------------------------------------------*)
	0:	(*enable instJS_MC_CyclicIn*)
        IF Enable_Prog_Functions THEN
            instJS_MC_CyclicIn.Enable := TRUE;
            ValidConCnt := 0;
            state := 1;
        END_IF;
        
    1:  (*wait instJS_MC_CyclicIn valid is stable*)
        IF instJS_MC_CyclicIn.Valid THEN
            ValidConCnt := ValidConCnt + 1;
            IF ValidConCnt >= 15 THEN
                CommunicationError := FALSE;
                state := 2;
			END_IF
		END_IF
        
    2:  (* reset erros from previous run*)
		instJS_MC_Reset.Execute := TRUE;
		state := 3;        
	
	3:  
    	IF instJS_MC_Reset.Done THEN
			instJS_MC_Reset.Execute := FALSE;
			state := 10;
		END_IF
							
	10: (* power on*)
		instJS_MC_Power.Enable := 1;
        state := 11;
        
    11:
		IF instJS_MC_Power.Status AND instJS_MC_Power.Valid THEN
            state := 30;
		END_IF

	30: (* start reference*)
		instJS_MC_Reference.Execute := TRUE;
		state := 31;
	
	31:
		IF instJS_MC_Reference.Done THEN
			instJS_MC_Reference.Execute := FALSE;
			state := 100;
		END_IF
    (*normal operation of demo application-------------------------------------------------------------------------------------------------------------*)
	100: (*drive to position 0*)
		instJS_MC_MoveAbsolute.Execute := TRUE;
		instJS_MC_MoveAbsolute.Position := 0;           //increment
		nMoveCount := 10000;
		instJS_MC_MoveAbsolute.Velocity := 100000;       //increment/s
		instJS_MC_MoveAbsolute.Acceleration := 1000000; //increment/s^2
		instJS_MC_MoveAbsolute.Scurve := 50;            //"smoothness" or change of acceleration in %
		state := 101;
		bYstart := FALSE;
	
	101:
		IF instJS_MC_MoveAbsolute.Done THEN
			instJS_MC_MoveAbsolute.Execute := FALSE;
			state := 102;
 		END_IF

	102: (*drive to position 40000*)
		IF bMotorOn THEN
			instJS_MC_MoveAbsolute.Execute := TRUE;
			instJS_MC_MoveAbsolute.Position := nMoveCount;       //increment
			nMoveCount := nMoveCount + 5000;
			instJS_MC_MoveAbsolute.Velocity := 50000;       //increment/s
			instJS_MC_MoveAbsolute.Acceleration := 1000000; //increment/s^2
			instJS_MC_MoveAbsolute.Scurve := 50;            //"smoothness" or change of acceleration in %
			state := 103;
		END_IF
	
	103:
	fbTon(IN := TRUE);
	IF fbTON.Q THEN
		fbTON(IN := FALSE);
		IF instJS_MC_MoveAbsolute.Done THEN
			instJS_MC_MoveAbsolute.Execute := FALSE;
            IF Enable_Prog_Functions THEN
				IF nMoveCount >= 75000 THEN 
					bYstart := TRUE;
					state := 100;
				ELSE
                	state := 101;   //restart
            	END_IF    
 			END_IF
    	END_IF
	END_IF
	
    200:(*idle state*)
        IF Enable_Prog_Functions THEN
            state := 100;
        END_IF    

    (*error handling-----------------------------------------------------------------------------------------------------------------------*)
    -10: (* Communication interrupted, reset variables and try to reconnect*)
        CommunicationError := TRUE;
		instJS_MC_CyclicIn.Enable := FALSE;
        
        instJS_MC_Reset.Execute := FALSE;
		instJS_MC_Reference.Execute := FALSE;
		instJS_MC_Power.Enable := FALSE;
		instJS_MC_MoveAbsolute.Execute := FALSE;
        state := 0;
        
    -20: (*Axis error during normal operation*)
        instJS_MC_Reset.Execute := FALSE;
		instJS_MC_Reference.Execute := FALSE;
		instJS_MC_Power.Enable := FALSE;
		instJS_MC_MoveAbsolute.Execute := FALSE;
        state := -21;
        
    -21:
        //instJS_MC_Reset.Execute := true; (*acknowledge axis error over hmi for example*)


    END_CASE

	(* Call all JS_MC_Lib function blocks if CyclicIn is Valid-------------------------------------------------------------------------------*)
    IF instJS_MC_CyclicIn.Valid THEN
        (*Function blocks required for operation*)
        instJS_MC_Power( pstAxis := instJS_MC_Init.pstAxis);
        instJS_MC_Reference( pstAxis := instJS_MC_Init.pstAxis);
        instJS_MC_Stop( pstAxis := instJS_MC_Init.pstAxis);
        instJS_MC_Reset( pstAxis := instJS_MC_Init.pstAxis);
        (*Additional function blocks for Profile Position*)
        instJS_MC_MoveAbsolute( pstAxis := instJS_MC_Init.pstAxis);
        instJS_MC_MoveRelative( pstAxis := instJS_MC_Init.pstAxis);
        instJS_MC_JogVelocity( pstAxis := instJS_MC_Init.pstAxis);
        instJS_MC_Halt( pstAxis := instJS_MC_Init.pstAxis);
        (*Function blocks for error handling*)
        instJS_MC_ReadAxisError( pstAxis := instJS_MC_Init.pstAxis);
        instJS_MC_AxisErrorCollector( pstAxis := instJS_MC_Init.pstAxis);
        (*Optional function blocks*)
        instJS_MC_ReadActualPosition( pstAxis := instJS_MC_Init.pstAxis);
        instJS_MC_ReadStatus( pstAxis := instJS_MC_Init.pstAxis);
        instJS_MC_ReadPSR( pstAxis := instJS_MC_Init.pstAxis);
        instJS_MC_ReadDigitalOutput( pstAxis := instJS_MC_Init.pstAxis);
        instJS_MC_ReadDigitalInput( pstAxis := instJS_MC_Init.pstAxis);
        instJS_MC_ReadParameter( pstAxis := instJS_MC_Init.pstAxis);
        instJS_MC_WriteParameter( pstAxis := instJS_MC_Init.pstAxis);
        instJS_MC_WriteDigitalOutput( pstAxis := instJS_MC_Init.pstAxis);
    END_IF
    //always call cyclic out
	instJS_MC_CyclicOut( pstAxis := instJS_MC_Init.pstAxis);
END_IF]]></ST>
    </Implementation>
    <LineIds Name="FB_XAxis">
      <LineId Id="53" Count="75" />
      <LineId Id="344" Count="0" />
      <LineId Id="129" Count="3" />
      <LineId Id="348" Count="0" />
      <LineId Id="133" Count="7" />
      <LineId Id="399" Count="0" />
      <LineId Id="141" Count="1" />
      <LineId Id="281" Count="0" />
      <LineId Id="143" Count="3" />
      <LineId Id="400" Count="0" />
      <LineId Id="147" Count="1" />
      <LineId Id="334" Count="1" />
      <LineId Id="337" Count="0" />
      <LineId Id="149" Count="2" />
      <LineId Id="338" Count="0" />
      <LineId Id="347" Count="0" />
      <LineId Id="339" Count="0" />
      <LineId Id="342" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="155" Count="2" />
      <LineId Id="346" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="158" Count="55" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>